#!/usr/bin/env bash
# This is a SLURM job script for running a sleap inference job with Apptainer on the Klone cluster at the University of Washington with an SMB share mounted using rclone.
#
# You need to have:
#  - A file in your home directory called '.smbpasswd' that contains the password for the SMB share.
#  - A list of input videos in a file called 'inputs.txt' in the root directory of the SMB share.
# to run this script, with one video path per line.
#
# To invoke the script, run, e.g.:
#     sbatch --account escience --partition gpu-a40 --array=1-4 sbatch-infer-with-rclone.job
# Where:
#   --account escience: The account to charge the job to.
#   --partition gpu-a40: The partition to run the job on.
#   --array=1-4: The array of tasks to run, set to 1-N where N is the number of input videos you have in 'inputs.txt'.
#
# = SLURM Job Configuration =
# Set the job name:
#SBATCH --job-name=sleap-train
# Enable email notifications when the job starts, ends, or fails:
#SBATCH --mail-type=END,FAIL
#SBATCH --mail-user=%u@uw.edu
# Set a maximum time for the job to run of 24 hours:
#SBATCH --time=24:00:00
# Set the number of tasks to 1:
#SBATCH --ntasks=1
# Set the number of CPU cores to 1:
#SBATCH --cpus-per-task=1
# Set the amount of memory to 32GB:
#SBATCH --mem=32G
# Set the number of GPUs to 1:
#SBATCH --gpus=1

# = COMMANDS =
set -o errexit # Quit on error
set -o pipefail # Quit on pipe error
set -o xtrace # Print each command before executing it

# == Rclone Configuration for UW Psychology Department SMB Share ==
#
# This section sets the environment variables configuring rclone to use the UW Psychology Department's SMB share as the backend.
#
# === Rclone Password Configuration ===
#
# This example assumes that the user has a file in their home directory called '.smbpasswd' that contains the password for the SMB share.
# You can create this file by copying the following command into your terminal, making sure to:
#  - Replace "ADDASPACEHERE" with a space character (to prevent the password from being saved in your shell history) so that it starts as " echo ..."
#  - Replace "your_password_here" with your actual password
#
# ADDASPACEHEREecho "your_password_here" > ~/.smbpasswd && chmod 600 ~/.smbpasswd
# 
# This is not a secure way to store passwords, but it is the only way to pass the password to rclone without any user interaction.
# If you are concerned about security, you should consider using a different method to store the password.
# "rclone config" can be used to store the password securely, but it requires user interaction to set up, which can be inconvenient for sbatch scripts. Don't use this method if you are working with sensitive data.

# Load the rclone module:
module load escience/rclone

# Set the rclone configuration type to 'smb':
export RCLONE_CONFIG_PSYCH_TYPE='smb'

# Set the IP address of the SMB server:
export RCLONE_CONFIG_PSYCH_HOST='172.25.226.40'

# Set the username for the SMB share:
export RCLONE_CONFIG_PSYCH_USER="${USER}" # Use the current user's UW NetID as the SMB username

# Set the password for the SMB share by reading it from a file in ~/.smbpasswd:
export RCLONE_CONFIG_PSYCH_PASS="$(cat ~/.smbpasswd | rclone obscure -)"

# Set rclone cache directory and create it if it doesn't exist:
export RCLONE_CACHE_DIR="/gscratch/scrubbed/${USER}/.cache/rclone"
mkdir -p "${RCLONE_CACHE_DIR}"

# === Mounting the SMB Share ===
# This lets you access the SMB share as a local directory on the HPC system.

# Set the root directory on the SMB share that you want to mount:
PSYCHLAB_ROOT="AhmedLab"

# The share will be mounted at /tmp/${USER}/rclone-mnt/<the job ID> and it will be accessible to the job while it is running:
PSYCHLAB_MOUNT="/tmp/${USER}/rclone-mnt/${SLURM_JOB_ID}"
mkdir -p "${PSYCHLAB_MOUNT}"

# Set a hook to unmount the SMB share when the job ends:
trap 'trap - EXIT; set +e; fusermount -u "${PSYCHLAB_MOUNT}"; rm -rf "${PSYCHLAB_MOUNT}"' EXIT

# Mount the SMB share using rclone and put it in the background:
rclone mount psych:"${PSYCHLAB_ROOT}" "${PSYCHLAB_MOUNT}" --daemon

# == SLEAP Inference ==

# This section runs SLEAP inference using the Apptainer container.

# === Set up Apptainer ===

# Set where we are working:
#   (This is a scratch directory that is purged every 30 days -- change this if you need to keep files longer)
export WORKDIR="/gscratch/scrubbed/${USER}/sleap"

# Create the base directory for the image if it doesn't exist and go there:
mkdir -p "${WORKDIR}" && cd "${WORKDIR}"

# Set URL to the SLEAP Apptainer image:
SLEAP_URL="oras://ghcr.io/maouw/sleap-container/sleap-container:0.9.2"

# Set path to the sleap Apptainer image:
SLEAP_SIF="${WORKDIR}/sleap-container.sif"

# Load the latest version of apptainer:
module load apptainer/local

# Set the Apptainer cache dir if not set so you don't fill up your home directory:
#   (Have to use "export" so that it's available to the apptainer command)
export APPTAINER_CACHEDIR="${APPTAINER_CACHEDIR:-/gscratch/scrubbed/${USER}/.cache/apptainer}"

# Create the cache directory if it doesn't exist:
mkdir -p "${APPTAINER_CACHEDIR}"

# If the image doesn't exist, download it:
# Note: It might be better to download the image in an interactive session *before* submitting the array job to avoid write conflicts.
[[ -f "${SLEAP_SIF}" ]] || apptainer pull "${SLEAP_SIF}" "${SLEAP_URL}"

# Set other Apptainer options:
export APPTAINER_CLEANENV=1 # Don't pass through environment variables
export APPTAINER_NV=1 # Enable NVIDIA support
export APPTAINER_WRITABLE_TMPFS=1 # Allow a writable /tmp
export APPTAINER_BIND="/gscratch" # Bind the /gscratch directory so the container can access it

# === Get Inputs ===

# Set path to the list of input videos. This file should contain one video path per line:
INPUTS_LIST="${PSYCHLAB_MOUNT}/inputs.txt"

# Check if the input list file exists:
[[ ! -f "${INPUTS_LIST}" ]] && { echo "Input list file not found at ${INPUTS_LIST}"; exit 1; }

# Get the input video for this task by reading the corresponding line from the input list file:
INPUT_VIDEO="$(sed -n "$(( 1 + (SLURM_ARRAY_TASK_ID - SLURM_ARRAY_TASK_MIN) ))p" "${INPUTS_LIST}")"
[[ -z "${INPUT_VIDEO}" ]] && { echo "No input line found for task ${SLURM_ARRAY_TASK_ID}"; exit 1; }

# Set the full path to the input video and check if it exists:
INPUT_PATH="${PSYCHLAB_MOUNT}/${INPUT_VIDEO}"
[[ ! -f "${INPUT_PATH}" ]] && { echo "Input video not found at ${INPUT_PATH}"; exit 1; }

# === Run Inference ===

# Use /usr/bin/time to get resource usage statistics and then launch the command:
/usr/bin/time -v apptainer run "${SLEAP_SIF}" \
    sleap-track \
    "${INPUT_PATH}" \
    -m "models/courtship.centroid" \
    -m "models/courtship.topdown_confmaps"

# Done!
echo "Inference output is ready for ${INPUT_PATH}"
